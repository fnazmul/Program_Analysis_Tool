// Signature file for parser generated by fsyacc
module LangParser
type token = 
  | EOF
  | ABORT
  | READ
  | WRITE
  | TRUE
  | FALSE
  | OD
  | FI
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | GUARD
  | MODULE
  | END
  | SEMICOLON
  | ARROW
  | SKIP
  | OR
  | AND
  | ADD
  | DIV
  | MUL
  | NOT
  | MINUS
  | EQ
  | LTN
  | GTN
  | NEQ
  | LEQ
  | GEQ
  | DO
  | IF
  | ASGN
  | COLON
  | NUMBER of (int)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ABORT
    | TOKEN_READ
    | TOKEN_WRITE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_OD
    | TOKEN_FI
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_GUARD
    | TOKEN_MODULE
    | TOKEN_END
    | TOKEN_SEMICOLON
    | TOKEN_ARROW
    | TOKEN_SKIP
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_ADD
    | TOKEN_DIV
    | TOKEN_MUL
    | TOKEN_NOT
    | TOKEN_MINUS
    | TOKEN_EQ
    | TOKEN_LTN
    | TOKEN_GTN
    | TOKEN_NEQ
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_DO
    | TOKEN_IF
    | TOKEN_ASGN
    | TOKEN_COLON
    | TOKEN_NUMBER
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_LangProgram
    | NONTERM_Command
    | NONTERM_GCmd
    | NONTERM_Arrow
    | NONTERM_Expression
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Program) 
